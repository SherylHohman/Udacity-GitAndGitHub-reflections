6) "Reflect: Merging Two Branches"
What is the result of merging two branches together? 
	The commits for both branches are interleved.
	The code from both branches are merged together. 
	They become the same "branch" (usu master).
Why do we represent it in the diagram the way we do?
	To indicate divergence and re-combining of code.
5) "Reflect: Visualizing with Diagrams1"
How do the diagrams help you visualize the branch structure?
	It makes it easy to see common history between branches:
	where they diverge, and where they are merged together again.
	It also makes it easy to see detached commits that will be lost.

4) "Reflect: When to Use Branches"
What are some situations when branches would be helpful in keeping your history organized? 
	Testing out new features.  Working on a bug. 
	Working on unrelated projects or features where so it will be easy to commit files separately
How would branches help?
	Keeps the code segregated from the main repository, until it has been tested, bug free, and 
	approved to be included in the main repo, master branch, official version.

3) "Reflect: Commit Size"
How can you use the staging area to make sure you have one commit per logical change?
	Leave files that are not part of that logical change "unstaged" while you stage and commit files that Are part of that logical change.

2a) How is the staging area different from the working directory and the repository? 
	Staging area lists files from the working directory that will be added to the repository 
	once the git commit command is run, these files will become part of the reepository.

2b) What value do you think it offers?
	Allows one to control when specific files are to be added to the repository,
	and allows one to attach a custom (commit) message to said files.
	It also allows one to group related files or related changes into separate logical commits.
	It also allows one to work on files, even different topics, without commiting them until they
	 (or their related edits/files) are ready.

1a) What happens when you initialize a repository?
	.git directory is created, containing files git needs to keep track of git commits, etc. 

1b) Why do you need to do it?
	You probably don't want to have a computer-wide git!
	To turn that directory into a repository.
	So git knows what files to track. To define a project.